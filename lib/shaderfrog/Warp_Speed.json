{
  "id": 269,
  "name": "Warp Speed",
  "fragment": "precision highp float;\n\nvarying vec2 vUv;\nuniform float time;\nuniform float speed;\nuniform float fadeAway;\nuniform vec3 color;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform float uniformity;\n\nvoid main(void) {\n    float t = time * speed;\n    vec2 position = (vUv.xy - resolution.xy * .5) / resolution.x;\n    float angle = atan(position.y, position.x) / (2. * 3.14159265359);\n    angle -= floor(angle);\n    float rad = length(position);\n    float angleFract = fract(angle * 256.);\n    float angleRnd = floor(angle * 256.) + 1.;\n    float angleRnd1 = fract(angleRnd * fract(angleRnd * .7235) * 45.1);\n    float angleRnd2 = fract(angleRnd * fract(angleRnd * .82657) * 13.724);\n    float t2 = t + angleRnd1 * uniformity;\n    float radDist = sqrt(angleRnd2);\n    float adist = radDist / rad * .1;\n    float dist = (t2 * .1 + adist);\n    dist = abs(fract(dist) - fadeAway);\n    \n    float outputColor = (1.0 / (dist)) * cos(0.7 * sin(t)) * adist / radDist / 30.0;\n    angle = fract(angle + .61);\n    gl_FragColor = vec4(outputColor * color, 1.0);\n}\n",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "type": "v3",
      "glslType": "vec3",
      "description": ""
    },
    "time": {
      "name": "time",
      "type": "f",
      "glslType": "float",
      "description": ""
    },
    "mouse": {
      "name": "mouse",
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 0.5,
        "y": 0.5
      },
      "description": ""
    },
    "resolution": {
      "name": "resolution",
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 1,
        "y": 1
      },
      "description": ""
    },
    "speed": {
      "name": "speed",
      "type": "f",
      "glslType": "float",
      "value": "10",
      "description": ""
    },
    "color": {
      "name": "color",
      "type": "c",
      "glslType": "vec3",
      "value": {
        "r": 0.5411764705882353,
        "g": 0.7764705882352941,
        "b": 0.9882352941176471
      },
      "description": ""
    },
    "fadeAway": {
      "name": "fadeAway",
      "type": "f",
      "glslType": "float",
      "value": "0.5",
      "description": ""
    },
    "uniformity": {
      "name": null,
      "type": "f",
      "glslType": "float",
      "value": "10",
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/269",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}